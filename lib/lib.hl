module lib;

class Vec<T> {
    *T value;
    i64 length;
    i64 element_size;

    fn void constructor() {
        self.value = fficall malloc(0);
        self.element_size = fficall sizeof(self.value[0]);
        self.length = 0;
    }

    fn void push(T element) {
        self[self.length] = element;
        self.length = self.length + 1;
    }

    fn T pop() {
        self.length = self.length - 1;
        return self[self.length];
    }

    fn T __index__(i64 idx) {
        return self.value[idx];
    }

    fn void __l_index__(i64 idx, T value) {
        if idx > (self.length - 1) {
            self.value = fficall realloc(self.value, self.element_size * idx);
            self.length = idx;
        }
        self.value[idx] = value;
    }
}

class String {
    Vec<u8> contents;

    fn void constructor() {
        self.contents = new Vec<u8>();
    }

    fn String __add__(String other) {
        let String rc = String.from(self);

        let i64 i = 0;
        while i < other.contents.length {
            rc.contents.push(other.contents[i]);
            i = i + 1;
        }

        return rc;
    }    

    static fn String fromBytes(*u8 bytes, i64 length) {
        let String rc = new String();

        let i64 i = 0;
        while i < length + 1 {
            rc.contents[i] = bytes[i];
            i = i + 1;
        }

        return rc;
    }

    static fn String from(String other) {
        return String.fromBytes(other.contents.value, other.contents.length);
    }
}

class IO {
    static fn void print(String s) {
        fficall write(1, s.contents.value, s.contents.length);
    }

    static fn void println(String s) {
        IO.print(s);
        IO.print("\n");
    }
}
