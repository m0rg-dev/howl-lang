{
    "fileTypes": [
        "hl"
    ],
    "name": "howl",
    "scopeName": "source.howl",
    "patterns": [
        {
            "include": "#module"
        },
        {
            "include": "#class"
        },
        {
            "include": "#function"
        }
    ],
    "repository": {
        "quoted_string": {
            "match": "\"(?:\\\\.|[^\\\\\"])*\"",
            "name": "string.quoted.double"
        },
        "number": {
            "match": "[^A-Za-z0-9_](\\d+)",
            "captures": {
                "1": {
                    "name": "constant.numeric"
                }
            }
        },
        "module": {
            "match": "(module)\\s+([^;]*);",
            "captures": {
                "1": {
                    "name": "keyword.other"
                },
                "2": {
                    "name": "entity.name.class"
                }
            }
        },
        "class": {
            "begin": "(class\\s+)([^{<]+)(<([^{]*)>)?",
            "end": "}",
            "name": "meta.class",
            "beginCaptures": {
                "1": {
                    "name": "storage.type"
                },
                "2": {
                    "name": "entity.name.class"
                },
                "4": {
                    "patterns": [
                        {
                            "match": "([^,]*),?",
                            "captures": {
                                "1": {
                                    "name": "entity.name.type"
                                }
                            }
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#function"
                },
                {
                    "include": "#classfield"
                }
            ]
        },
        "classfield": {
            "match": "([*_A-Za-z0-9<>,\\s]+\\s+)([_A-Za-z0-9]+)\\s*;",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                "2": {
                    "name": "variable.other"
                }
            }
        },
        "function": {
            "begin": "(static\\s+)?(fn\\s+)([*_A-Za-z0-9<>,\\s]+\\s+)([_A-Za-z0-9]+)\\(([*_A-Za-z0-9<>,\\s]*)\\)\\s*{",
            "end": "}",
            "name": "meta.function",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier"
                },
                "2": {
                    "name": "storage.type"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                "4": {
                    "name": "entity.name.function"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#function_parameter"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "function_parameter": {
            "match": "([*_A-Za-z0-9<>\\s]+\\s+)([_A-Za-z0-9]+)\\s*,?\\s*",
            "name": "meta.parameter",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                "2": {
                    "name": "variable.parameter"
                }
            }
        },
        "expression": {
            "name": "meta.expression",
            "patterns": [
                {
                    "include": "#quoted_string"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#self"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "#return"
                },
                {
                    "include": "#loops_conditionals"
                },
                {
                    "include": "#fficall"
                },
                {
                    "include": "#let"
                },
                {
                    "include": "#new"
                }
            ]
        },
        "block": {
            "name": "meta.block",
            "begin": "{",
            "end": "}",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "loops_conditionals": {
            "match": "(?<=\\W)(if|while)(?=\\W)",
            "name": "keyword.control"
        },
        "fficall": {
            "match": "(fficall\\s+)([_A-Za-z0-9]+)",
            "captures": {
                "1": {
                    "name": "keyword.control"
                },
                "2": {
                    "name": "support.function"
                }
            }
        },
        "let": {
            "match": "(let\\s+)([*_A-Za-z0-9<>,\\s]+\\s+)([_A-Za-z0-9]+)",
            "captures": {
                "1": {
                    "name": "storage.type"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                },
                "3": {
                    "name": "variable.other"
                }
            }
        },
        "new": {
            "match": "(new\\s+)([*_A-Za-z0-9<>,\\s]+)",
            "captures": {
                "1": {
                    "name": "keyword.other"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#type"
                        }
                    ]
                }
            }
        },
        "self": {
            "match": "(?<=\\W)self(?=\\W)",
            "name": "variable.language"
        },
        "return": {
            "match": "(?<=\\W)return(?=\\W)",
            "name": "keyword.control"
        },
        "type": {
            "match": ".*",
            "name": "entity.name.type"
        }
    }
}