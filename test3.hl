module Test3;

class Vec<T> {
    *T value;
    i64 length;
    i64 element_size;

    fn void constructor() {
        self.value = fficall malloc(0);
        self.element_size = fficall sizeof(self.value[0]);
        self.length = 0;
    }

    fn T __index__(i64 idx) {
        return self.value[idx];
    }

    fn void __l_index__(i64 idx, T value) {
        if (idx > self.length) {
            self.value = fficall realloc(self.value, self.element_size * idx);
            self.length = idx;
        }
        self.value[idx] = value;
    }
}

class String<> {
    Vec<u8> contents;

    fn void constructor() {
        self.contents = new Vec();
    }

    static fn String fromBytes(*u8 bytes, i64 length) {
        let String rc;
        rc = new String();

        let i64 i;
        i = 0;
        while(i < length + 1) {
            rc.contents[i] = bytes[i];
            i = i + 1;
        }

        return rc;
    }
}

class IO<> {
    static fn void print(String s) {
        fficall write(1, s.contents.value, s.contents.length);
    }
}

static fn i32 main() {
    IO.print("Awoooooooo~!\n");
    return 0;
}
