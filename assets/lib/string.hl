import vec;

interface Display {
    fn String toString() {}
}

class String {
    Vec<u8> contents;

    fn void constructor() {
        self.contents = new Vec<u8>();
    }

    fn String __add__(String other) {
        let String rc = String.from(self);

        let i64 i = 0;
        while i < other.contents.length {
            rc.contents.push(other.contents[i]);
            i = i + 1;
        }

        return rc;
    }

    fn String __add__(i64 other) {
        return self + String.from(other);
    }

    fn String __add__(Display other) {
        return self + other.toString();
    }

    static fn String fromBytes(*u8 bytes, i64 length) {
        let String rc = new String();

        let i64 i = 0;
        while i < length {
            rc.contents[i] = bytes[i];
            i = i + 1;
        }

        return rc;
    }

    static fn String from(String other) {
        return String.fromBytes(other.contents.value, other.contents.length);
    }

    static fn String from(i64 value) {
        let Vec<String> digits = !vec(String, "0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

        if value < 10 {
            return digits[value];
        } else {
            return String.from(value / 10) + String.from(value % 10);
        }
    }

    static fn String from(Display other) {
        return other.toString();
    }
}
