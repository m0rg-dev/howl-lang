class Vec<T> {
    *T value;
    i64 length;
    i64 element_size;

    fn void constructor() {
        self.value = fficall malloc(0);
        self.element_size = fficall sizeof(self.value[0]);
        self.length = 0;
    }

    fn void push(T element) {
        self[self.length] = element;
    }

    fn T pop() {
        self.length = self.length - 1;
        return self[self.length];
    }

    fn T __index__(i64 idx) {
        return self.value[idx];
    }

    fn void __index__(i64 idx, T value) {
        if idx >= self.length {
            self.value = fficall realloc(self.value, self.element_size * (idx + 1));
            self.length = idx + 1;
        }
        self.value[idx] = value;
    }

    fn void __l_index__(i64 idx, T value) {
        self.__index__(idx, value);

    }
}
