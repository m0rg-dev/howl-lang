// Structure to facilitate pointer shenanigans.
class Pointer<T> {
    *T value;

    fn void constructor(T value) {
        self.value = $typednull();
        $pointer_assign(unsafe.malloc($sizeof(self.value[0])), self.value);
        self.value[0] = value;
    }

    fn i64 size() {
        return $sizeof(self.value[0]);
    }

    fn T dereference() {
        return self.value[0];
    }

    fn *u8 structure_pointer() {
        return $get_object_pointer(self.value);
    }

    fn *T value_pointer() {
        return self.value;
    }
}

class ExternalPointer<T> {
    *T value;

    fn void constructor(*u8 value) {
        self.value = $typednull();
        $pointer_assign(value, self.value);
    }

    fn T dereference() {
        return self.value[0];
    }
}

extern fn *u8 malloc(i64 size);
extern fn void free(*u8 ptr);
