interface Display {
    fn String toString();
}

class String implements Display {
    Vec<u8> contents;

    fn void constructor() {
        self.contents = new Vec<u8>();
    }

    fn String __add__(String other) {
        let String rc = String.from(self);

        let i64 i = 0;
        while i < other.contents.length() {
            rc.contents.push(other.contents[i]);
            i = i + 1;
        }

        return rc;
    }

    fn String __add__(i64 other) {
        return self + String.from(other);
    }

    fn String __add__(Display other) {
        return self + other.toString();
    }

    fn bool equals(String other) {
        let i64 i = 0;
        while i < self.contents.length() {
            if i >= other.contents.length() {
                return false;
            }
            if self.contents[i] != other.contents[i] {
                return false;
            }
            i = i + 1;
         }
        return true;
    }

    fn i64 byteLength() {
        return self.contents.length();
    }

    fn String repeat(i64 count) {
        let String rc = String.from(self);
        let i64 i = 0;
        while i < count {
            rc = rc + self;
            i = i + 1;
        }
        return rc;
    }

    fn Option<i64> toInt() {
        // ascii nonsense time
        let i64 rc = 0;
        let i64 i = 0;
        while i < self.contents.length() {
            if self.contents[i] > 57 {
                return Option::<i64>.none();
            }
            if self.contents[i] < 48 {
                return Option::<i64>.none();
            }
            rc = rc * 10;
            rc = rc + (self.contents[i] - 48);
            i = i + 1;
        }
        return Option::<i64>.some(rc);
    }

    static fn String fromBytes(*u8 bytes, i64 length) {
        let String rc = new String();

        let i64 i = 0;
        while i < length {
            rc.contents[i] = bytes[i];
            i = i + 1;
        }

        return rc;
    }

    static fn String fromBytes(Vec<u8> bytes) {
        let String rc = new String();

        let i64 i = 0;
        while i < bytes.length() {
            rc.contents[i] = bytes[i];
            i = i + 1;
        }

        return rc;
    }

    static fn String from(String other) {
        return String.fromBytes(other.contents.value, other.contents.length());
    }

    static fn String from(i64 value) {
        let Vec<String> digits = new Vec<String>();
        digits.push("0");
        digits.push("1");
        digits.push("2");
        digits.push("3");
        digits.push("4");
        digits.push("5");
        digits.push("6");
        digits.push("7");
        digits.push("8");
        digits.push("9");

        if value < 10 {
            return digits[value];
        } else {
            return String.from(value / 10) + String.from(value % 10);
        }
    }

    static fn String from(Display other) {
        return other.toString();
    }

    fn String toString() {
        return String.from(self);
    }
}
