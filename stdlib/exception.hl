class Exception implements Display {
    String message;

    extern fn void exit(i32 code);
    extern fn *i8 __exc_push();
    extern fn void __exc_pop(*i8 handler);
    extern fn void __exc_throw(*i8 object);
    extern fn *i8 __exc_get();
    extern fn *i32 __jmp_buf();
    extern fn i32 setjmp(*i32 jmp_buf);

    fn void constructor(String message) {
        self.message = message;
    }

    fn String toString() {
        return self.message;
    }

    static fn Exception exc_get() {
        let ExternalPointer<Exception> tmp_buf
            = new ExternalPointer<Exception>(Exception.__exc_get());
        return tmp_buf.dereference();
    }

    static fn bool exc_check(String catch_class) {
        lib.IO.println("exc_check " + catch_class);
        let Exception real = Exception.exc_get();

        let Option<StaticTable> attempt = Option::<StaticTable>.some(
            StaticTable.load(!get_stable_pointer(real))
        );

        lib.IO.println("actual exception type is " + attempt.unwrap().getName());

        while attempt.isSome() {
            lib.IO.println("exc_check against " + attempt.unwrap().getName());
            if attempt.unwrap().getName().equals(catch_class) {
                return true;
            }
            attempt = attempt.unwrap().getParent();
        }

        return false;
    }

    static fn void __exc_throw(Exception object) {
        let Pointer<Exception> e = new Pointer<Exception>(object);
        Self.__exc_throw(!as_raw(e.value_pointer()));
    }
}
