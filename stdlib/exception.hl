class Exception implements Display {
    String message;
    Vec<String> stacktrace;

    extern fn void exit(i32 code);
    extern fn *u8 __exc_push();
    extern fn void __exc_pop(*u8 handler);
    extern fn void __exc_throw(*u8 object);
    extern fn *u8 __exc_get();
    extern fn *i32 __jmp_buf();
    extern fn i32 setjmp(*i32 jmp_buf);
    extern fn i32 backtrace(*(*u8) buffer, i32 size);
    extern fn *(*u8) backtrace_symbols(*(*u8) buffer, i32 size);
    extern fn i64 strlen(*u8 str);

    fn void constructor(String message) {
        self.message = message;
        self.stacktrace = self.getStackTrace();
    }

    fn Vec<String> getStackTrace() {
        let *(*u8) callstack = $typednull();
        $pointer_assign(unsafe.malloc(128 * 4), callstack);
        let i32 frames = Exception.backtrace(callstack, 128);
        let *(*u8) strs = Exception.backtrace_symbols(callstack, 128);
        let i32 i = 0;
        let Vec rc = new Vec<String>();
        while i < frames {
            rc.push(String.fromBytes(strs[i], Exception.strlen(strs[i])));
            i = i + 1;
        }
        unsafe.free($as_raw(callstack));
        return rc;
    }

    fn String toString() {
        let String rc = (reflect.StaticTable.load($get_stable_pointer(self))).getName() + ": " + self.message + "\n";
        rc = rc + "Stack trace:\n";
        let Iterator i = self.stacktrace.iter();
        while i.hasNext() {
            rc = rc + "  " + i.next() + "\n";
        }
        return rc;
    }

    static fn Exception exc_get() {
        let unsafe.ExternalPointer<Exception> tmp_buf
            = new unsafe.ExternalPointer<Exception>(Exception.__exc_get());
        return tmp_buf.dereference();
    }

    static fn bool exc_check(String catch_class) {
        let Exception real = Exception.exc_get();

        let Option<reflect.StaticTable> attempt = Option::<reflect.StaticTable>.some(
            reflect.StaticTable.load($get_stable_pointer(real))
        );

        while attempt.isSome() {
            if attempt.unwrap().getName().equals(catch_class) {
                return true;
            }
            attempt = attempt.unwrap().getParent();
        }

        return false;
    }

    static fn void __exc_throw(Exception object) {
        let unsafe.Pointer<Exception> e = new unsafe.Pointer<Exception>(object);
        Self.__exc_throw($as_raw(e.value_pointer()));
    }
}

class UncheckedException extends Exception {}
