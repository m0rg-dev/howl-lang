// Structure to facilitate pointer shenanigans.
class Pointer<T> {
    *T value;

    extern fn *i8 malloc(i64 size);

    fn void constructor(T value) {
        !pointer_assign(Self.malloc(!sizeof(self.value[0])), self.value);
        self.value[0] = value;
    }

    fn void import(*i8 other) {
        !pointer_assign(other, self.value);
    }

    fn i32 size() {
        return !sizeof(self.value[0]);
    }

    fn T dereference() {
        return self.value[0];
    }

    fn *i8 structure_pointer() {
        return !get_object_pointer(self.value);
    }

    fn *T value_pointer() {
        return self.value;
    }
}

class ExternalPointer<T> {
    *T value;

    fn void constructor(*i8 value) {
        !pointer_assign(value, self.value);
    }

    fn T dereference() {
        return self.value[0];
    }
}
