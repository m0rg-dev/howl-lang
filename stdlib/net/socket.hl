class sockaddr_in {
    u16 sin_family;
    u16 sin_port;
    u32 s_addr;
    u64 pad;

    fn void constructor(u16 sin_family, u16 sin_port, u32 s_addr) {
        self.sin_family = sin_family;
        self.sin_port = sin_port;
        self.s_addr = s_addr;
        self.pad = 0;
    }
}

interface SocketServer {
    fn void handle(i32 clientfd) throws ErrnoException;
}

class InetSocket {
    unsafe.Pointer<sockaddr_in> addr;
    i32 fd;

    fn void constructor(u16 port, u32 address) {
        let i32 c_AF_INET = 2;
        let i32 c_SOCK_STREAM = 1;

        self.fd = RawIO.socket(c_AF_INET, c_SOCK_STREAM, 0);
        self.addr = new unsafe.Pointer<sockaddr_in>(new sockaddr_in(
            c_AF_INET,
            RawIO.htons(port),
            address
        ));
    }

    fn void listen(i32 queue_size) throws IO.ErrnoException {
        if RawIO.bind(self.fd, self.addr.structure_pointer(), self.addr.size()) < 0 {
            throw new IO.ErrnoException("bind");
        }

        if RawIO.listen(self.fd, queue_size) < 0 {
            throw new IO.ErrnoException("listen");
        }
    }

    fn i32 accept() throws IO.ErrnoException {
        let unsafe.Pointer<sockaddr_in> clientaddr = new unsafe.Pointer<sockaddr_in>(new sockaddr_in(0, 0, 0));
        let unsafe.Pointer<i32> clientlen = new unsafe.Pointer<i32>(clientaddr.size());
        let i32 childfd = RawIO.accept(self.fd, clientaddr.structure_pointer(), clientlen.value_pointer());
        if childfd < 0 {
            throw new IO.ErrnoException("accept");
        }
        return childfd;
    }

    fn void serve(i32 queue_size, SocketServer server) {
        self.listen(queue_size);
        while true {
            server.handle(self.accept());
        }
    }
}
