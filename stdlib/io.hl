class IO {
    static fn void print(String s) {
        RawIO.write(1, s.contents.value, s.contents.length);
    }

    static fn void println(String s) {
        IO.print(s);
        IO.print("\n");
    }

    static fn void println(Display d) {
        IO.println(d.toString());
    }
}

class RawIO {
    extern fn i64 read(i32 fildes, *i8 buf, i64 nbyte);
    extern fn i64 write(i32 fildes, *i8 buf, i64 nbyte);
    extern fn i32 close(i32 fildes);

    extern fn *i8 strerror(i32 errnum);
    extern fn i32 __get_errno();
    
    extern fn i64 strlen(*i8 str);

    extern fn i32 socket(i32 domain, i32 type, i32 protocol);
    extern fn i32 bind(i32 socket, *i8 address, i32 size);
    extern fn i32 listen(i32 socket, i32 backlog);
    extern fn i32 accept(i32 socket, *i8 address, *i32 address_len);
    extern fn i16 htons(i16 hostshort);
}

class sockaddr_in {
    u16 sin_family;
    u16 sin_port;
    u32 s_addr;
    u64 pad;

    fn void constructor(u16 sin_family, u16 sin_port, u32 s_addr) {
        self.sin_family = sin_family;
        self.sin_port = sin_port;
        self.s_addr = s_addr;
        self.pad = 0;
    }
}

class ErrnoException extends Exception {
    fn void constructor(String desc) {
        // strerror is fine here because String.fromBytes() will copy it out
        let *u8 raw_error = RawIO.strerror(RawIO.__get_errno());
        self.message = desc + ": " + String.fromBytes(raw_error, RawIO.strlen(raw_error));
    }
}

interface SocketServer {
    fn void handle(i32 clientfd) throws ErrnoException;
}

class InetSocket {
    Pointer<sockaddr_in> addr;
    i32 fd;

    fn void constructor(u16 port, u32 address) {
        let i32 c_AF_INET = 2;
        let i32 c_SOCK_STREAM = 1;

        self.fd = RawIO.socket(c_AF_INET, c_SOCK_STREAM, 0);
        self.addr = new Pointer<sockaddr_in>(new sockaddr_in(
            c_AF_INET,
            RawIO.htons(port),
            address
        ));
    }

    fn void listen(i32 queue_size) throws ErrnoException {
        if RawIO.bind(self.fd, self.addr.structure_pointer(), self.addr.size()) < 0 {
            throw new ErrnoException("bind");
        }

        if RawIO.listen(self.fd, queue_size) < 0 {
            throw new ErrnoException("listen");
        }
    }

    fn i32 accept() throws ErrnoException {
        let Pointer<sockaddr_in> clientaddr = new Pointer<sockaddr_in>(new sockaddr_in(0, 0, 0));
        let Pointer<i32> clientlen = new Pointer<i32>(clientaddr.size());
        let i32 childfd = RawIO.accept(self.fd, clientaddr.structure_pointer(), clientlen.value_pointer());
        if childfd < 0 {
            throw new ErrnoException("accept");
        }
        return childfd;
    }

    fn void serve(i32 queue_size, SocketServer server) {
        self.listen(queue_size);
        while 1 == 1 {
            server.handle(self.accept());
        }
    }
}
