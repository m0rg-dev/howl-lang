class StaticTable {
    String name;
    Option<StaticTable> parent;

    extern fn i64 strlen(*u8 s);
    extern fn i32 __checknull(*u8 ptr);

    // stable_pointer: *{*name, *parent, ...}
    static fn StaticTable load(*u8 stable_pointer) {
        let unsafe.ExternalPointer<*u8> real_ptr = new unsafe.ExternalPointer<*u8>(stable_pointer);
        let StaticTable rc = new StaticTable();
        let *u8 raw_name = real_ptr.value[0];
        let *u8 raw_parent = real_ptr.value[1];
        
        rc.name = String.fromBytes(raw_name, StaticTable.strlen(raw_name));
        if StaticTable.__checknull(raw_parent) > 0 {
            rc.parent = Option::<StaticTable>.none();
        } else {
            rc.parent = Option::<StaticTable>.some(StaticTable.load(raw_parent));
        }

        return rc;
    }

    fn String getName() {
        return self.name;
    }

    fn Option<StaticTable> getParent() {
        return self.parent;
    }
}
