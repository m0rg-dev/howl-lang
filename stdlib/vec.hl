class Vec<T> {
    *T value;
    i64 length;
    i64 element_size;

    extern fn *i8 malloc(i64 size);
    extern fn *i8 realloc(*i8 ptr, i64 size);

    fn void constructor() {
        !pointer_assign(Self.malloc(0), self.value);
        self.element_size = !sizeof(self.value[0]);
        self.length = 0;
    }

    fn void push(T element) {
        self[self.length] = element;
    }

    fn T pop() {
        self.length = self.length - 1;
        return self[self.length];
    }

    fn T __index__(i64 idx) {
        return self.value[idx];
    }

    fn void __index__(i64 idx, T value) {
        if idx >= self.length {
            !pointer_assign(
                Self.realloc(!as_raw(self.value), self.element_size * (idx + 1)),
                self.value
            );
            self.length = idx + 1;
        }
        self.value[idx] = value;
    }
}
