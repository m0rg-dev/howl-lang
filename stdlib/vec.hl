class Vec<T> {
    *T value;
    i64 _length;
    i64 element_size;

    extern fn *i8 malloc(i64 size);
    extern fn *i8 realloc(*i8 ptr, i64 size);

    fn void constructor() {
        $pointer_assign(Self.malloc(0), self.value);
        self.element_size = $sizeof(self.value[0]);
        self._length = 0;
    }

    fn void push(T element) {
        self[self._length] = element;
    }

    fn T pop() {
        self._length = self._length - 1;
        return self[self._length];
    }

    fn i64 length() {
        return self._length;
    }

    fn T __index__(i64 idx) {
        if idx >= self._length {
            throw new VectorIndexOutOfBoundsException(idx, self._length);
        } else if idx < 0  {
            throw new VectorIndexOutOfBoundsException(idx, self._length);
        }
        return self.value[idx];
    }

    fn void __index__(i64 idx, T value) {
        if idx >= self._length {
            $pointer_assign(
                Self.realloc($as_raw(self.value), self.element_size * (idx + 1)),
                self.value
            );
            self._length = idx + 1;
        } else if idx < 0 {
            throw new VectorIndexOutOfBoundsException(idx, self._length);
        }
        self.value[idx] = value;
    }

    fn VecIterator<T> iter() {
        return new VecIterator<T>(self);
    }
}

class VecIterator<T> implements Iterator<T> {
    Vec<T> source;
    i64 index;

    fn void constructor(Vec<T> source) {
        self.source = source;
        self.index = 0;
    }

    fn bool hasNext() {
        return self.index < self.source.length();
    }

    fn T next() throws OverrunException {
        if self.hasNext() {
            let T rc = self.source[self.index];
            self.index = self.index + 1;
            return rc;
        } else {
            throw new OverrunException("VecIterator index out of bounds (index was " + self.index + ", length was " + self.source.length() + ")");
        }
    }
}

class VectorIndexOutOfBoundsException extends UncheckedException {
    fn void constructor(i64 index, i64 length) {
        self.message = "Vector index " + index + " out of bounds (length was " + length + ")";
    }
}
